---
- name: Harden SSH access by copying sshd_config and disabling root login
  hosts: old
  become: true
  gather_facts: false
  vars_files:
    - ../host_vars/old.yml
    - ../host_vars/new.yml
  tasks:
    - name: Fetch sshd_config from old server
      fetch:
        src: /etc/ssh/sshd_config
        dest: files/sshd_config
        flat: true

- name: Check sudo access on the new server
  hosts: new
  become: true
  gather_facts: false
  vars_files:
    - ../host_vars/new.yml
  tasks:
    - name: Run a simple sudo command
      command: sudo whoami

- name: Apply hardened SSH config to new server
  hosts: new
  become: true
  gather_facts: false
  vars_files:
    - ../host_vars/old.yml
    - ../host_vars/new.yml
  vars:
    sshd_config_source: files/sshd_config
    sshd_config_target: /etc/ssh/sshd_config

  tasks:
    - name: Backup current sshd_config
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.bak_{{ ansible_date_time.iso8601 }}
        remote_src: true

    - name: Copy sshd_config from fetched file
      copy:
        src: "{{ sshd_config_source }}"
        dest: "{{ sshd_config_target }}"
        owner: root
        group: root
        mode: '0644'

    - name: Validate sshd_config syntax
      shell: sshd -t
      register: sshd_check
      failed_when: sshd_check.rc != 0

    - name: Set root password from new host_vars
      user:
        name: root
        password: "{{ root_ssh_password | password_hash('sha512') }}"
        update_password: always

    - name: Restart SSH service (only if config is valid)
      systemd:
        name: ssh
        state: restarted
        enabled: true

    - name: Wait for SSH to come back up
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 33
        delay: 5
        timeout: 30
        state: started
