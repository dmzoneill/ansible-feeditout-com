- name: Ensure certbot is installed
  apt:
    name: certbot
    state: present
    update_cache: true

- name: Initialize certbot tracking facts
  set_fact:
    certbot_needed: false
    certs_to_issue: []

- name: Check if cert exists
  stat:
    path: "/etc/letsencrypt/live/{{ domain_entry.domain }}/cert.pem"
  loop: "{{ domains }}"
  loop_control:
    loop_var: domain_entry
    label: "{{ domain_entry.domain }}"
  register: cert_stat_results

- name: Normalize domain/stat pair into a structured list
  set_fact:
    domain_cert_pairs: >-
      {{
        domain_cert_pairs | default([]) + [ {
          "domain": item.0.domain,
          "virtual_hosts": item.0.virtual_hosts,
          "stat": item.1.stat
        } ]
      }}
  loop: "{{ domains | zip(cert_stat_results.results) | list }}"

- name: Combine cert data with parsed SANs
  set_fact:
    domain_cert_openssl_pairs: >-
      {{
        domain_cert_openssl_pairs | default([]) + [ {
          "domain": item.0.domain,
          "virtual_hosts": item.0.virtual_hosts,
          "stat": item.0.stat,
          "cert_output": item.1.stdout
        } ]
      }}
  loop: "{{ domain_cert_pairs | zip(openssl_cert_results.results) | list }}"

- name: Determine which certs need to be issued
  set_fact:
    certs_to_issue: "{{ certs_to_issue + [ {
      'domain': domain_cert.domain,
      'domains': ([domain_cert.domain] + (domain_cert.virtual_hosts | map(attribute='name') | list)) | unique }] }}"
    certbot_needed: true
  when: >
    not domain_cert.stat.exists or
    (
      (
        [domain_cert.domain] + (domain_cert.virtual_hosts | map(attribute='name') | list)
      ) | unique
      | difference(
          (domain_cert.cert_output | regex_findall('DNS:([^,\\s]+)') | unique) | default([])
        )
    ) | length > 0
  loop: "{{ domain_cert_openssl_pairs }}"
  loop_control:
    loop_var: domain_cert
    label: "{{ domain_cert.domain }}"


- name: Stop Apache if certbot is needed
  ansible.builtin.service:
    name: apache2
    state: stopped
  when: certbot_needed

- name: Run certbot for domains that need certificates
  command: >
    certbot certonly --standalone
    --cert-name {{ cert_entry.domain }}
    {{ cert_entry.domains | map('regex_replace', '^(.*)$', '-d \1') | join(' ') }}
    --agree-tos --non-interactive --register-unsafely-without-email --expand
  loop: "{{ certs_to_issue }}"
  loop_control:
    loop_var: cert_entry
    label: "{{ cert_entry.domain }}"
  register: certbot_result
  failed_when: certbot_result.rc != 0 and 'Certificate not yet due for renewal' not in certbot_result.stderr
  ignore_errors: true
  when: certbot_needed

- name: Start Apache if certbot was run
  ansible.builtin.service:
    name: apache2
    state: started
  when: certbot_needed

- name: Ensure {{ certbot_helpers_dir }} exists
  file:
    path: "{{ certbot_helpers_dir }}"
    state: directory
    mode: '0755'
    owner: dave
    group: dave

- name: Copy certbot.sh
  copy:
    src: certbot.sh
    dest: "{{ certbot_helpers_dir }}/certbot.sh"
    mode: '0755'
    owner: dave
    group: dave

- name: Copy missing.sh
  copy:
    src: missing.sh
    dest: "{{ certbot_helpers_dir }}/missing.sh"
    mode: '0755'
    owner: dave
    group: dave

- name: Copy certbot_clean_old.sh
  copy:
    src: certbot_clean_old.sh
    dest: "{{ certbot_helpers_dir }}/certbot_clean_old.sh"
    mode: '0755'
    owner: dave
    group: dave

- name: Run clean_old.sh to clean up certs
  command: "{{ certbot_helpers_dir }}/certbot_clean_old.sh"
  become: true
  changed_when: false

# - name: Run missing.sh to check and issue missing certs
#   command: "{{ certbot_helpers_dir }}/missing.sh"
#   become: true
#   register: missing_sh_result
#   changed_when: false
#   failed_when: missing_sh_result.rc != 0 and "'âœ… No missing domains'" not in missing_sh_result.stdout
#   ignore_errors: true

# - name: Copy certbot_clean_old.sh
#   copy:
#     src: certbot_clean_old.sh
#     dest: "{{ certbot_helpers_dir }}/certbot_clean_old.sh"
#     mode: '0755'
#     owner: dave
#     group: dave

# - name: Run clean_old.sh to check and issue missing certs
#   command: "{{ certbot_helpers_dir }}/certbot_clean_old.sh"
#   become: true
#   changed_when: false
