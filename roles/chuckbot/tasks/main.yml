---
- name: Ensure /opt/Chuckbot exists (root)
  become: true
  file:
    path: /opt/Chuckbot
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0755'

- name: Check if /opt/Chuckbot is a Git repo (as {{ user }})
  become: true
  become_user: "{{ user }}"
  stat:
    path: /opt/Chuckbot/.git
  register: chuckbot_git

- name: Get current remote if it exists (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: git remote get-url origin
  args:
    chdir: /opt/Chuckbot
  register: git_remote
  when: chuckbot_git.stat.exists
  failed_when: false
  changed_when: false

- name: Clone repo if not present or invalid (as {{ user }})
  become: true
  become_user: "{{ user }}"
  git:
    repo: git@github.com:dmzoneill/Chuckbot.git
    dest: /opt/Chuckbot
    version: main
    update: true
    force: true
  when: not chuckbot_git.stat.exists or git_remote.stdout != "git@github.com:dmzoneill/Chuckbot.git"

- name: Check for dirty working directory (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: git status --porcelain
  args:
    chdir: /opt/Chuckbot
  register: git_dirty
  changed_when: false
  failed_when: false

- name: Check if local branch is ahead of remote (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: git status -sb
  args:
    chdir: /opt/Chuckbot
  register: git_ahead
  changed_when: false
  failed_when: false

- name: Debug git dirty and ahead status
  debug:
    msg: |
      Dirty: {{ git_dirty.stdout != "" }}
      Ahead: {{ 'ahead' in git_ahead.stdout }}

- name: Amend last commit if dirty and ahead (as {{ user }})
  become: true
  become_user: "{{ user }}"
  shell: |
    git config user.name "Chuckbot"
    git config user.email "chuckbot@localhost"
    git add -A
    git commit --amend --no-edit || echo "Nothing to amend"
  args:
    chdir: /opt/Chuckbot
  when:
    - git_dirty.stdout != ""
    - git_ahead.stdout is search('ahead')

- name: Create new commit if dirty and not ahead (as {{ user }})
  become: true
  become_user: "{{ user }}"
  shell: |
    export GIT_COMMITTER_NAME="Chuckbot"
    export GIT_COMMITTER_EMAIL="chuckbot@localhost"
    git config --local user.name "Chuckbot"
    git config --local user.email "chuckbot@localhost"
    git add -A
    GIT_EDITOR=true git commit -m "Local dirty state commit" || echo "Nothing to commit"
  args:
    chdir: /opt/Chuckbot
  when:
    - git_dirty.stdout != ""
    - git_ahead.stdout is not search('ahead')

- name: Get current commit hash before pull (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: git rev-parse HEAD
  args:
    chdir: /opt/Chuckbot
  register: git_hash_before
  changed_when: false

- name: Pull latest from origin with rebase (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: git pull --rebase
  args:
    chdir: /opt/Chuckbot
  register: git_pull_result
  changed_when: "'up to date' not in git_pull_result.stdout"
  when:
    - git_dirty.stdout == ""
    - git_remote.stdout == "git@github.com:dmzoneill/Chuckbot.git"

- name: Get current commit hash after pull (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: git rev-parse HEAD
  args:
    chdir: /opt/Chuckbot
  register: git_hash_after
  changed_when: false
  when: git_pull_result is defined

- name: Set fact if git hash changed
  set_fact:
    chuckbot_git_updated: true
  when: git_hash_before.stdout != git_hash_after.stdout

- name: Copy chuckbot.service to systemd dir
  copy:
    src: /opt/Chuckbot/systemd/chuckbot.service
    dest: /etc/systemd/system/chuckbot.service
    mode: '0644'
  register: service_file

- name: Set fact if repo or service file changed
  set_fact:
    chuckbot_needs_restart: true
  when: >
    (chuckbot_git_updated | default(false)) or
    (service_file is defined and service_file.changed)

- name: Run npm ci if repo was updated (as {{ user }})
  become: true
  become_user: "{{ user }}"
  command: npm ci
  args:
    chdir: /opt/Chuckbot
  environment:
    HOME: "/home/{{ user }}"
  when: chuckbot_git_updated | default(false)
  ignore_errors: true

- name: Reload systemd if service file changed
  become: true
  command: systemctl daemon-reexec
  when: service_file.changed

- name: Enable chuckbot service
  become: true
  command: systemctl enable chuckbot.service
  when: service_file.changed

- name: Try stopping chuckbot service
  become: true
  command: systemctl stop chuckbot.service
  register: stop_result
  failed_when: false
  changed_when: stop_result.rc == 0
  when: chuckbot_needs_restart | default(false)

- name: Kill node process if systemctl stop failed
  shell: |
    pkill -f chuckbot.js || true
  when:
    - chuckbot_needs_restart | default(false)
    - stop_result.rc != 0

- name: Restart chuckbot service only if code or service file changed
  become: true
  command: systemctl restart chuckbot.service
  when: chuckbot_needs_restart | default(false)
