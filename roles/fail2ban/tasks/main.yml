---
- name: Ensure fail2ban is installed
  apt:
    name: fail2ban
    state: present
    update_cache: true

- name: Ensure /etc/fail2ban exists
  file:
    path: /etc/fail2ban
    state: directory
    mode: '0755'

- name: Copy all top-level files (e.g. jail.local)
  copy:
    src: "{{ item }}"
    dest: "/etc/fail2ban/{{ item | basename }}"
    owner: root
    group: root
    mode: '0644'
  with_fileglob:
    - "{{ role_path }}/files/*.local"
  notify: Restart fail2ban

- name: Copy filter.d custom filters
  copy:
    src: "{{ role_path }}/files/filter.d/"
    dest: /etc/fail2ban/filter.d/
    owner: root
    group: root
    mode: '0644'
    recurse: yes
  notify: Restart fail2ban

- name: Copy action.d custom actions
  copy:
    src: "{{ role_path }}/files/action.d/"
    dest: /etc/fail2ban/action.d/
    owner: root
    group: root
    mode: '0644'
    recurse: yes
  notify: Restart fail2ban

- name: Ensure jail2ban is started and enabled
  service:
    name: fail2ban
    state: started
    enabled: true

- name: Get banned IPs from jail
  command: "fail2ban-client status {{ fail2ban_jail }}"
  register: jail_status
  changed_when: false

- name: Extract banned IPs
  set_fact:
    banned_ips: "{{ jail_status.stdout | regex_search('Banned IP list:\\s*(.*)', '\\1') | default('') | trim | split(' ') }}"

- name: Unban IPs if currently banned
  command: "fail2ban-client set {{ fail2ban_jail }} unbanip {{ ip }}"
  when: ip in banned_ips
  loop: "{{ unban_ips }}"
  loop_control:
    loop_var: ip
  register: unban_result
  changed_when: true
