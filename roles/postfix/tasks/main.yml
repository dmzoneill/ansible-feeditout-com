---
- name: Install Postfix
  apt:
    name: postfix
    state: present
    update_cache: true

- name: Ensure /etc/postfix exists
  file:
    path: /etc/postfix
    state: directory
    mode: '0755'

- name: Recursively copy Postfix configuration to /etc/postfix
  copy:
    src: "{{ role_path }}/files/"
    dest: /etc/
    owner: root
    group: root
    mode: preserve
    directory_mode: '0755'
  notify: Restart postfix

- name: Create override directory for postfix.service
  file:
    path: /etc/systemd/system/postfix.service.d
    state: directory
    mode: '0755'

- name: Override postfix.service to use real ExecStart
  copy:
    dest: /etc/systemd/system/postfix.service.d/override.conf
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/sbin/postfix start
      ExecReload=
      ExecReload=/usr/sbin/postfix reload
      Type=forking
      RemainAfterExit=no
    mode: '0644'
  notify:
    - Reload systemd
    - Restart postfix

- name: Ensure and start Postfix
  service:
    name: postfix
    enabled: true
    state: started

# --- Permission Checks ---

- name: Stop Postfix to ensure consistent permission checking
  service:
    name: postfix
    state: stopped

- name: Check maildrop permissions
  stat:
    path: /var/spool/postfix/maildrop
  register: maildrop_stat

- name: Fix maildrop if needed
  file:
    path: /var/spool/postfix/maildrop
    owner: root
    group: postdrop
    mode: '0730'
  when: >
    maildrop_stat.stat.pw_name != 'root' or
    maildrop_stat.stat.gr_name != 'postdrop' or
    maildrop_stat.stat.mode != '0730'

- name: Check private permissions
  stat:
    path: /var/spool/postfix/private
  register: private_stat

- name: Fix private if needed
  file:
    path: /var/spool/postfix/private
    owner: postfix
    group: postfix
    mode: '0700'
  when: >
    private_stat.stat.pw_name != 'postfix' or
    private_stat.stat.gr_name != 'postfix' or
    private_stat.stat.mode != '0700'

- name: Check spool permissions
  stat:
    path: /var/spool/postfix
  register: spool_stat

- name: Fix spool if needed
  file:
    path: /var/spool/postfix
    owner: root
    group: root
    mode: '0755'
  when: >
    spool_stat.stat.pw_name != 'root' or
    spool_stat.stat.gr_name != 'root' or
    spool_stat.stat.mode != '0755'

- name: Ensure /usr/sbin/postdrop has correct permissions and group
  file:
    path: /usr/sbin/postdrop
    state: file
    owner: root
    group: postdrop
    mode: '2755'

- name: Ensure /var/spool/postfix/defer has correct permissions
  file:
    path: /var/spool/postfix/defer
    state: directory
    owner: postfix
    group: postfix
    mode: '0700'

- name: Check for incorrect socket ownership in private dir
  command: find /var/spool/postfix/private -type s ! -group postfix -print -quit
  register: socket_check
  changed_when: false

- name: Fix socket permissions only if needed
  command: find /var/spool/postfix/private -type s -exec chown root:postfix {} +
  when: socket_check.stdout != ""

- name: Start Postfix only if stopped
  service:
    name: postfix
    state: started
    enabled: true

- name: Run postfix check (ignore error if Postfix not fully initialized)
  command: postfix check
  ignore_errors: true
  changed_when: false

# --- Cert Hook Script ---

- name: Install postfix-updatecerts script from static file
  copy:
    src: postfix-updatecerts.sh
    dest: /usr/bin/postfix-updatecerts
    mode: '0755'
    owner: root
    group: root

# --- Map Builder ---

- name: Define list of postfix map files
  set_fact:
    postfix_maps:
      - { src: "aliases", tool: "postalias" }
      - { src: "sender_access", tool: "postmap" }
      - { src: "sender_checks", tool: "postmap" }
      - { src: "sasl_passwd", tool: "postmap" }
      - { src: "client_checks", tool: "postmap" }
      - { src: "header_checks", tool: "postmap" }
      - { src: "bcc_maps", tool: "postmap" }
      - { src: "recipient_domains", tool: "postmap" }
      - { src: "vhosts", tool: "postmap" }

- name: Rebuild postfix maps if source file exists
  command: "{{ map_file.tool }} hash:/etc/postfix/{{ map_file.src }}"
  args:
    creates: "/etc/postfix/{{ map_file.src }}.db"
  loop: "{{ postfix_maps }}"
  loop_control:
    loop_var: map_file
  when: ansible_facts['distribution'] != 'Alpine'
  notify: Restart postfix