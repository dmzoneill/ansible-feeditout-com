---
- name: Install Postfix
  apt:
    name: postfix
    state: present
    update_cache: true

- name: Ensure /etc/postfix exists
  file:
    path: /etc/postfix
    state: directory
    mode: '0755'

- name: Recursively copy Postfix configuration to /etc/postfix
  copy:
    src: "{{ role_path }}/files/"
    dest: /etc/
    owner: root
    group: root
    mode: preserve
    directory_mode: '0755'
  notify: Restart postfix

- name: Ensure and start Postfix
  service:
    name: postfix
    enabled: true
    state: started

# --- Permissions Fix Section ---

- name: Stop Postfix only if running
  service:
    name: postfix
    state: stopped
  when: ansible_service_mgr == 'systemd'

- name: Ensure maildrop dir has correct permissions
  file:
    path: /var/spool/postfix/maildrop
    state: directory
    owner: root
    group: postdrop
    mode: '0730'

- name: Ensure postdrop binary has correct permissions and group
  file:
    path: /usr/sbin/postdrop
    state: file
    owner: root
    group: postdrop
    mode: '2755'

- name: Ensure /var/spool/postfix/private has correct permissions
  file:
    path: /var/spool/postfix/private
    state: directory
    owner: postfix
    group: postfix
    mode: '0700'

- name: Ensure postfix spool has correct ownership
  file:
    path: /var/spool/postfix
    state: directory
    recurse: yes
    owner: root
    group: root

- name: Check for incorrect socket ownership in private dir
  command: find /var/spool/postfix/private -type s ! -group postfix -print -quit
  register: socket_fix_needed
  changed_when: false
  check_mode: no

- name: Fix socket permissions only if needed
  command: find /var/spool/postfix/private -type s -exec chown root:postfix {} +
  when: socket_fix_needed.stdout != ""
  changed_when: true

- name: Start Postfix only if stopped
  service:
    name: postfix
    state: started
    enabled: true

- name: Run postfix check (ignore error if Postfix not fully initialized)
  command: postfix check
  ignore_errors: true
  changed_when: false

# --- Cert Hook Script ---

- name: Ensure postfix-updatecerts script exists with correct content and is executable
  copy:
    dest: /usr/bin/postfix-updatecerts
    mode: '0755'
    owner: root
    group: root
    content: |
      #!/bin/bash
      rm -rvf /etc/postfix/certs/*
      cd /etc/letsencrypt/live
      rm /etc/postfix/sni
      touch /etc/postfix/sni
      for X in $(ls | grep -v 'README\|0001'); do 
          domain=$(echo $X | sed 's/www\.//')
          echo $domain
          if [ ! -d "/etc/postfix/certs/$domain" ]; then
              mkdir -vp /etc/postfix/certs/$domain
              cat $X/privkey.pem > /etc/postfix/certs/$domain/chain.pem
              cat $X/fullchain.pem >> /etc/postfix/certs/$domain/chain.pem
              echo "$domain /etc/postfix/certs/$domain/chain.pem" >> /etc/postfix/sni
          fi
      done
      /usr/sbin/postmap -F hash:/etc/postfix/sni
      /bin/systemctl restart postfix

# --- Map Builder ---

- name: Define list of postfix map files
  set_fact:
    postfix_maps:
      - { src: "aliases",      tool: "postalias" }
      - { src: "sender_access", tool: "postmap" }
      - { src: "sender_checks", tool: "postmap" }
      - { src: "sasl_passwd",   tool: "postmap" }
      - { src: "client_checks", tool: "postmap" }
      - { src: "header_checks", tool: "postmap" }
      - { src: "bcc_maps",      tool: "postmap" }
      - { src: "recipient_domains", tool: "postmap" }
      - { src: "vhosts",        tool: "postmap" }

- name: Rebuild postfix maps if source file exists
  command: "{{ map_file.tool }} hash:/etc/postfix/{{ map_file.src }}"
  args:
    creates: "/etc/postfix/{{ map_file.src }}.db"
  loop: "{{ postfix_maps }}"
  loop_control:
    loop_var: map_file
  when: ansible_facts['distribution'] != 'Alpine'
  notify: Restart postfix
