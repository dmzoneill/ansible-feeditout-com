---
- name: Ensure iptables-persistent is installed
  apt:
    name: iptables-persistent
    state: present
    update_cache: true

- name: Define iptables command variants
  set_fact:
    iptables_cmds:
      - iptables
      - ip6tables

- name: Ensure ANSIBLE_INPUT and ANSIBLE_OUTPUT chains exist
  shell: "/sbin/{{ combo[0] }} -N {{ combo[1] }} || true"
  loop: "{{ iptables_cmds | product(['ANSIBLE_INPUT', 'ANSIBLE_OUTPUT']) | list }}"
  changed_when: false

- name: Ensure INPUT and OUTPUT jump rules exist
  shell: |
    if ! /sbin/{{ combo[0] }} -C {{ combo[1][0] }} -j {{ combo[1][1] }} 2>/dev/null; then
      /sbin/{{ combo[0] }} -I {{ combo[1][0] }} 1 -j {{ combo[1][1] }}
    fi
  loop: "{{ iptables_cmds | product([['INPUT', 'ANSIBLE_INPUT'], ['OUTPUT', 'ANSIBLE_OUTPUT']]) | list }}"
  changed_when: false

- name: Debug rules before building strings
  debug:
    msg:
      - "INPUT rules: {{ ansible_input_rules | length }} items"
      - "OUTPUT rules: {{ ansible_output_rules | length }} items"

- name: Build expected rule strings for INPUT
  set_fact:
    expected_input_rule_lines: "{{ ansible_input_rules | map('iptables_build_rule', 'ANSIBLE_INPUT') | list }}"

- name: Build expected rule strings for OUTPUT
  set_fact:
    expected_output_rule_lines: "{{ ansible_output_rules | map('iptables_build_rule', 'ANSIBLE_OUTPUT') | list }}"

- name: Combine all expected rules
  set_fact:
    all_expected_rules: >-
      {{
        (expected_input_rule_lines | zip(['iptables'] * (expected_input_rule_lines | length))) +
        (expected_output_rule_lines | zip(['iptables'] * (expected_output_rule_lines | length)))
      }}

- name: Check if each expected rule exists (IPv4)
  shell: "/sbin/{{ all_expected_rules[ansible_loop.index0][1] }} {{ all_expected_rules[ansible_loop.index0][0] | regex_replace('^-A', '-C') }}"
  loop: "{{ all_expected_rules }}"
  loop_control:
    loop_var: dummy
  register: rule_check
  changed_when: false
  failed_when: false

- name: Add missing expected rules (IPv4)
  shell: "/sbin/{{ rule_check.results[ansible_loop.index0].item[1] }} {{ rule_check.results[ansible_loop.index0].item[0] }}"
  when: rule_check.results[ansible_loop.index0].rc != 0
  loop: "{{ rule_check.results }}"
  loop_control:
    loop_var: dummy

- name: Prune unmanaged rules (IPv4/IPv6)
  shell: |
    /sbin/{{ combo[0] }} -S {{ combo[1][0] }} | \
    grep "^-A {{ combo[1][0] }}" | \
    grep -v '{{ combo[1][1] }}' | \
    grep -v 'DOCKER' | \
    grep -v 'f2b' | \
    while read rule; do
      /sbin/{{ combo[0] }} $(echo "$rule" | sed 's/^-A/-D/') || true
    done
  loop: "{{ iptables_cmds | product([['INPUT', 'ANSIBLE_INPUT'], ['OUTPUT', 'ANSIBLE_OUTPUT']]) | list }}"
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false

- name: Ensure logging rule exists in ANSIBLE_OUTPUT (IPv4)
  shell: |
    /sbin/iptables -C ANSIBLE_OUTPUT -m conntrack --ctstate NEW -j LOG --log-prefix "IPT-OUTPUT: " --log-level 4 || \
    /sbin/iptables -I ANSIBLE_OUTPUT 1 -m conntrack --ctstate NEW -j LOG --log-prefix "IPT-OUTPUT: " --log-level 4
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false

- name: Set default policies
  shell: "/sbin/{{ combo[0] }} -P {{ combo[1] }} {{ combo[2] }}"
  loop:
    - [iptables, INPUT, DROP]
    - [iptables, FORWARD, DROP]
    - [iptables, OUTPUT, ACCEPT]
    - [ip6tables, INPUT, DROP]
    - [ip6tables, FORWARD, DROP]
    - [ip6tables, OUTPUT, ACCEPT]
  loop_control:
    loop_var: combo
  changed_when: false

- name: Save iptables and ip6tables rules
  shell: "/sbin/{{ item }}-save > /etc/iptables/rules.v{{ '6' if item == 'ip6tables' else '4' }}"
  loop: "{{ iptables_cmds }}"
  changed_when: false
