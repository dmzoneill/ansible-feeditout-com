---
- name: Ensure iptables-persistent is installed
  apt:
    name: iptables-persistent
    state: present
    update_cache: true

- name: Define iptables command variants
  set_fact:
    iptables_cmds:
      - iptables
      - ip6tables

- name: Ensure ANSIBLE_INPUT and ANSIBLE_OUTPUT chains exist
  shell: "/sbin/{{ combo_table }} -N {{ combo_chain }} || true"
  loop: "{{ iptables_cmds | product(['ANSIBLE_INPUT', 'ANSIBLE_OUTPUT']) | list }}"
  loop_control:
    loop_var: combo_pair
  vars:
    combo_table: "{{ combo_pair[0] }}"
    combo_chain: "{{ combo_pair[1] }}"
  changed_when: false

- name: Ensure INPUT and OUTPUT jump rules exist
  shell: |
    if ! /sbin/{{ table }} -C {{ direction }} -j {{ chain }} 2>/dev/null; then
      /sbin/{{ table }} -I {{ direction }} 1 -j {{ chain }}
    fi
  loop: "{{ iptables_cmds | product([['INPUT', 'ANSIBLE_INPUT'], ['OUTPUT', 'ANSIBLE_OUTPUT']]) | list }}"
  loop_control:
    loop_var: combo_pair
  vars:
    table: "{{ combo_pair[0] }}"
    direction: "{{ combo_pair[1][0] }}"
    chain: "{{ combo_pair[1][1] }}"
  changed_when: false

- name: Build expected rule strings for INPUT
  set_fact:
    expected_input_rule_lines: "{{ ansible_input_rules | map('iptables_build_rule', 'ANSIBLE_INPUT') | list }}"

- name: Build expected rule strings for OUTPUT
  set_fact:
    expected_output_rule_lines: "{{ ansible_output_rules | map('iptables_build_rule', 'ANSIBLE_OUTPUT') | list }}"

- name: Combine all expected rules
  set_fact:
    all_expected_rules: >-
      {{
        (expected_input_rule_lines | zip(['iptables'] * (expected_input_rule_lines | length))) +
        (expected_output_rule_lines | zip(['iptables'] * (expected_output_rule_lines | length)))
      }}

- name: Check if each expected rule exists (IPv4)
  shell: "/sbin/{{ expected_rule[1] }} {{ expected_rule[0] | regex_replace('^-A', '-C') }}"
  loop: "{{ all_expected_rules }}"
  loop_control:
    loop_var: expected_rule
  register: rule_check
  changed_when: false
  failed_when: false

- name: Add missing expected rules (IPv4)
  shell: "/sbin/{{ missing_rule.item[1] }} {{ missing_rule.item[0] }}"
  when:
    - missing_rule.rc is defined
    - missing_rule.rc != 0
    - missing_rule.item is defined
  loop: "{{ rule_check.results }}"
  loop_control:
    loop_var: missing_rule

- name: DEBUG — Show which iptables rules would be pruned (IPv4 & IPv6)
  shell: |
    echo "=== Checking {{ table }} {{ chain }} ==="
    /sbin/{{ table }} -S {{ chain }} | grep "^-A" | while read rule; do
      rule_str=$(echo "$rule")
      expected="{{ expected_rules | join('\n') }}"
      echo "Rule: $rule_str"
      if echo "$expected" | grep -Fxq "$rule_str"; then
        echo " → KEPT (matches expected)"
      else
        echo " → WOULD DELETE (not in expected list)"
      fi
    done
  loop:
    - { table: iptables, chain: ANSIBLE_INPUT, expected_rules: "{{ expected_input_rule_lines }}" }
    - { table: iptables, chain: ANSIBLE_OUTPUT, expected_rules: "{{ expected_output_rule_lines }}" }
    - { table: ip6tables, chain: ANSIBLE_INPUT, expected_rules: "{{ expected_input_rule_lines }}" }
    - { table: ip6tables, chain: ANSIBLE_OUTPUT, expected_rules: "{{ expected_output_rule_lines }}" }
  loop_control:
    loop_var: combo
  register: prune_check_output
  vars:
    table: "{{ combo.table }}"
    chain: "{{ combo.chain }}"
    expected_rules: "{{ combo.expected_rules }}"
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false

- name: Show summary of rules that would be pruned
  debug:
    msg: "{{ result.stdout_lines }}"
  loop: "{{ prune_check_output.results }}"
  loop_control:
    loop_var: result
    label: "{{ result.combo.table }} {{ result.combo.chain }}"

- name: Prune unmanaged rules from ANSIBLE_INPUT and ANSIBLE_OUTPUT (IPv4/IPv6)
  shell: |
    /sbin/{{ table }} -S {{ chain }} | grep "^-A" | while read rule; do
      rule_str=$(echo "$rule")
      expected="{{ expected_rules | join('\n') }}"
      if ! echo "$expected" | grep -Fxq "$rule_str"; then
        echo "Removing: $rule_str"
        echo /sbin/{{ table }} $(echo "$rule_str" | sed 's/^-A/-D/') || true
      fi
    done
  loop:
    - { table: iptables, chain: ANSIBLE_INPUT, expected_rules: "{{ expected_input_rule_lines }}" }
    - { table: iptables, chain: ANSIBLE_OUTPUT, expected_rules: "{{ expected_output_rule_lines }}" }
    - { table: ip6tables, chain: ANSIBLE_INPUT, expected_rules: "{{ expected_input_rule_lines }}" }
    - { table: ip6tables, chain: ANSIBLE_OUTPUT, expected_rules: "{{ expected_output_rule_lines }}" }
  loop_control:
    loop_var: combo
    label: "{{ combo.table }} {{ combo.chain }}"
  vars:
    table: "{{ combo.table }}"
    chain: "{{ combo.chain }}"
    expected_rules: "{{ combo.expected_rules }}"
  args:
    executable: /bin/bash
  changed_when: true
  failed_when: false

- name: Ensure logging rule exists in ANSIBLE_OUTPUT (IPv4)
  shell: |
    /sbin/iptables -C ANSIBLE_OUTPUT -m conntrack --ctstate NEW -j LOG --log-prefix "IPT-OUTPUT: " --log-level 4 || \
    /sbin/iptables -I ANSIBLE_OUTPUT 1 -m conntrack --ctstate NEW -j LOG --log-prefix "IPT-OUTPUT: " --log-level 4
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false

- name: Build policy list from host vars
  set_fact:
    iptables_policy_list:
      - { tool: iptables, chain: INPUT,    policy: "{{ ansible_policy_ipv4_input }}" }
      - { tool: iptables, chain: OUTPUT,   policy: "{{ ansible_policy_ipv4_output }}" }
      - { tool: iptables, chain: FORWARD,  policy: "{{ ansible_policy_ipv4_forward }}" }
      - { tool: ip6tables, chain: INPUT,   policy: "{{ ansible_policy_ipv6_input }}" }
      - { tool: ip6tables, chain: OUTPUT,  policy: "{{ ansible_policy_ipv6_output }}" }
      - { tool: ip6tables, chain: FORWARD, policy: "{{ ansible_policy_ipv6_forward }}" }

- name: Set default policies (from host vars)
  shell: "/sbin/{{ policy_combo.tool }} -P {{ policy_combo.chain }} {{ policy_combo.policy }}"
  loop: "{{ iptables_policy_list }}"
  loop_control:
    loop_var: policy_combo
    label: "{{ policy_combo.tool }} {{ policy_combo.chain }} → {{ policy_combo.policy }}"
  changed_when: false

- name: Save iptables and ip6tables rules
  shell: "/sbin/{{ save_tool }}-save > /etc/iptables/rules.v{{ '6' if save_tool == 'ip6tables' else '4' }}"
  loop: "{{ iptables_cmds }}"
  loop_control:
    loop_var: save_tool
  changed_when: false
