- name: Define Apache module lists
  set_fact:
    broken_apache_modules:
      - name: mpm_prefork
        package: null
      - name: qos
        package: libapache2-mod-qos
      - name: evasive
        package: libapache2-mod-evasive
      - name: php
        package: libapache2-mod-php8.2
      - name: php8.2
        package: libapache2-mod-php8.2
      - name: security2
        package: libapache2-mod-security2
    required_apache_modules:
      - name: mpm_event
        package: apache2
      - name: proxy
        package: apache2
      - name: proxy_fcgi
        package: apache2
      - name: setenvif
        package: apache2
      - name: geoip
        package: libapache2-mod-geoip
      - name: fcgid
        package: libapache2-mod-fcgid

- name: Ensure /etc/apache2 exists
  file:
    path: /etc/apache2
    state: directory
    mode: '0755'

- name: Copy Apache config
  copy:
    src: "{{ role_path }}/files/"
    dest: /etc/apache2/
    owner: root
    group: root
    mode: preserve
    directory_mode: '0755'
  notify: restart apache2

- name: Disable broken Apache modules by removing .load files
  file:
    path: "/etc/apache2/mods-enabled/{{ mod.name }}.load"
    state: absent
  loop: "{{ broken_apache_modules }}"
  loop_control:
    loop_var: mod
  changed_when: false
  failed_when: false

- name: Remove broken Apache modules' .conf files
  file:
    path: "/etc/apache2/mods-enabled/{{ mod.name }}.conf"
    state: absent
  loop: "{{ broken_apache_modules }}"
  loop_control:
    loop_var: mod
  changed_when: false
  failed_when: false

- name: Remove broken Apache module packages if installed
  apt:
    name: "{{ mod.package }}"
    state: absent
  when: mod.package is not none
  loop: "{{ broken_apache_modules }}"
  loop_control:
    loop_var: mod
  changed_when: false

- name: Ensure required Apache module packages are installed
  apt:
    name: "{{ required_mod.package }}"
    state: present
  loop: "{{ required_apache_modules }}"
  loop_control:
    loop_var: required_mod

- name: Ensure mpm_event module .load symlink exists
  file:
    src: "/etc/apache2/mods-available/mpm_event.load"
    dest: "/etc/apache2/mods-enabled/mpm_event.load"
    state: link
    force: true
  notify: restart apache2

- name: Ensure mpm_event module .conf symlink exists
  file:
    src: "/etc/apache2/mods-available/mpm_event.conf"
    dest: "/etc/apache2/mods-enabled/mpm_event.conf"
    state: link
    force: true
  notify: restart apache2

- name: Extract SSL cert paths from enabled site configs
  shell: "grep -rhoE '^\\s*SSLCertificateFile\\s+\\S+' /etc/apache2/sites-enabled/ | awk '{print $2}' | sort -u"
  register: ssl_cert_paths
  changed_when: false

- name: Check for missing or empty SSL cert files
  stat:
    path: "{{ item }}"
  loop: "{{ ssl_cert_paths.stdout_lines }}"
  register: cert_statuses

- name: Run certbot if any referenced certs are missing or empty
  command: /home/dave/bin/certbot.sh
  args:
    chdir: /home/dave
  when: cert_statuses.results | selectattr('stat.exists', 'equalto', false) | list
        or cert_statuses.results | selectattr('stat.size', 'defined') | selectattr('stat.size', 'equalto', 0) | list
  register: certbot_result
  changed_when: certbot_result.rc == 0
  failed_when: certbot_result.rc != 0

- name: Extract DocumentRoot paths from enabled site configs
  shell: "grep -rhoE '^\\s*DocumentRoot\\s+\\S+' /etc/apache2/sites-enabled/ | awk '{print $2}' | sort -u"
  register: document_roots
  changed_when: false

- name: Ensure each DocumentRoot directory exists
  file:
    path: "{{ item }}"
    state: directory
    owner: dave
    group: dave
    mode: '0755'
  loop: "{{ document_roots.stdout_lines }}"
  when: item != '/'

- name: Verify Apache config is currently valid before enabling modules
  command: apache2ctl configtest
  register: apache_configtest
  changed_when: false
  failed_when: "'Syntax OK' not in apache_configtest.stdout"
  when: ansible_facts.os_family == 'Debian'

- name: Enable required Apache modules
  apache2_module:
    name: "{{ required_mod.name }}"
    state: present
  loop: "{{ required_apache_modules }}"
  loop_control:
    loop_var: required_mod
  notify: restart apache2

- name: Ensure Apache2 is started and enabled
  service:
    name: apache2
    state: started
    enabled: true
