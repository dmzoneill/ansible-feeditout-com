---
- name: Ensure /etc/apache2 exists
  file:
    path: /etc/apache2
    state: directory
    mode: '0755'

- name: Ensure vhost directories exist
  file:
    path: "/etc/apache2/{{ subdir }}"
    state: directory
    mode: '0755'
  loop:
    - sites-available
    - sites-enabled
  loop_control:
    loop_var: subdir

- name: Build vhost config list from virtual hosts
  set_fact:
    apache_vhosts: "{{ apache_vhosts | default([]) + domain_entry.virtual_hosts | default([]) | map('combine', {
      'conf_name': item.name + '-ssl.conf',
      'domain': item.name,
      'domain_aliases': ['www.' + item.name] if not item.name.startswith('www.') else [],
      'domain_alias': item.name,
      'document_root': item.document_root,
      'loglevel': domain_entry.loglevel | default('warn'),
      'role_user': role_user | default('www-data'),
      'custom_directory_perms': domain_entry.custom_directory_perms | default(false),
      'enabled': item.enabled | default(false),
      'secure': true }) | list }}"
  loop: "{{ domains }}"
  loop_control:
    loop_var: domain_entry

- name: Add base domain vhost (http only)
  set_fact:
    apache_vhosts: "{{ apache_vhosts + [ {
      'conf_name': domain_entry.domain + '.conf',
      'domain': domain_entry.domain,
      'domain_aliases': [ 'www.' + domain_entry.domain ],
      'domain_alias': domain_entry.domain,
      'document_root': domain_entry.document_root,
      'loglevel': domain_entry.loglevel | default('warn'),
      'role_user': role_user | default('www-data'),
      'custom_directory_perms': domain_entry.custom_directory_perms | default(false),
      'enabled': domain_entry.enabled | default(false),
      'secure': false } ] }}"
  loop: "{{ domains }}"
  loop_control:
    loop_var: domain_entry

- name: Create insecure vhost files
  template:
    src: insecure.conf.j2
    dest: "/etc/apache2/sites-available/{{ vhost.conf_name }}"
    mode: '0644'
  loop: "{{ apache_vhosts }}"
  loop_control:
    loop_var: vhost
  when: not vhost.secure
  notify: Reload Apache

- name: Create secure vhost files
  template:
    src: secure.conf.j2
    dest: "/etc/apache2/sites-available/{{ vhost.conf_name }}"
    mode: '0644'
  loop: "{{ apache_vhosts }}"
  loop_control:
    loop_var: vhost
  when: vhost.secure
  notify: Reload Apache

- name: Enable vhosts via symlinks
  file:
    src: "/etc/apache2/sites-available/{{ vhost.conf_name }}"
    dest: "/etc/apache2/sites-enabled/{{ vhost.conf_name }}"
    state: link
    force: true
  loop: "{{ apache_vhosts | selectattr('enabled') | list }}"
  loop_control:
    loop_var: vhost

- name: List current vhost configs
  find:
    paths: /etc/apache2/sites-available
    patterns: "*.conf"
  register: existing_confs

- name: Remove unmanaged vhost configs
  file:
    path: "{{ conf.path }}"
    state: absent
  loop: "{{ existing_confs.files }}"
  loop_control:
    loop_var: conf
  when: (conf.path | basename) not in (apache_vhosts | map(attribute='conf_name') | list)

- name: Disable broken Apache modules by removing .load files
  file:
    path: "/etc/apache2/mods-enabled/{{ mod.name }}.load"
    state: absent
  loop: "{{ broken_apache_modules }}"
  loop_control:
    loop_var: mod
  changed_when: false
  failed_when: false

- name: Remove broken Apache modules' .conf files
  file:
    path: "/etc/apache2/mods-enabled/{{ mod.name }}.conf"
    state: absent
  loop: "{{ broken_apache_modules }}"
  loop_control:
    loop_var: mod
  changed_when: false
  failed_when: false

- name: Remove broken Apache module packages if installed
  apt:
    name: "{{ mod.package }}"
    state: absent
  when: mod.package is not none
  loop: "{{ broken_apache_modules }}"
  loop_control:
    loop_var: mod
  changed_when: false

- name: Ensure required Apache module packages are installed
  apt:
    name: "{{ required_mod.package }}"
    state: present
  loop: "{{ required_apache_modules }}"
  loop_control:
    loop_var: required_mod

- name: Ensure mpm_event module .load symlink exists
  file:
    src: "/etc/apache2/mods-available/mpm_event.load"
    dest: "/etc/apache2/mods-enabled/mpm_event.load"
    state: link
    force: true
  notify: restart apache2

- name: Ensure mpm_event module .conf symlink exists
  file:
    src: "/etc/apache2/mods-available/mpm_event.conf"
    dest: "/etc/apache2/mods-enabled/mpm_event.conf"
    state: link
    force: true
  notify: restart apache2

- name: Enable mod_headers
  file:
    src: "/etc/apache2/mods-available/headers.load"
    dest: "/etc/apache2/mods-enabled/headers.load"
    state: link
    force: true
  notify: restart apache2

- name: Extract SSL cert paths from enabled site configs
  shell: "grep -rhoE '^\\s*SSLCertificateFile\\s+\\S+' /etc/apache2/sites-enabled/ | awk '{print $2}' | sort -u"
  register: ssl_cert_paths
  changed_when: false

- name: Check for missing or empty SSL cert files
  stat:
    path: "{{ cert_path }}"
  loop: "{{ ssl_cert_paths.stdout_lines }}"
  loop_control:
    loop_var: cert_path
  register: cert_statuses

- name: Run certbot if any referenced certs are missing or empty
  command: "{{ certbot_helpers_dir }}/certbot.sh"
  args:
    chdir: "{{ certbot_helpers_dir }}"
  when: cert_statuses.results | selectattr('stat.exists', 'equalto', false) | list
        or cert_statuses.results | selectattr('stat.size', 'defined') | selectattr('stat.size', 'equalto', 0) | list
  register: certbot_result
  changed_when: certbot_result.rc == 0
  failed_when: certbot_result.rc != 0

- name: Extract DocumentRoot paths from enabled site configs
  shell: "grep -rhoE '^\\s*DocumentRoot\\s+\\S+' /etc/apache2/sites-enabled/ | awk '{print $2}' | sort -u"
  register: document_roots
  changed_when: false

- name: Ensure each DocumentRoot directory exists
  file:
    path: "{{ docroot }}"
    state: directory
    owner: "{{ role_user }}"
    group: "{{ role_user }}"
    mode: '0755'
  loop: "{{ document_roots.stdout_lines }}"
  loop_control:
    loop_var: docroot
  when: docroot != '/'

- name: Verify Apache config is currently valid before enabling modules
  command: apache2ctl configtest
  register: apache_configtest
  changed_when: false
  failed_when: "'Syntax OK' not in apache_configtest.stderr"

- name: Enable required Apache modules
  apache2_module:
    name: "{{ required_mod.name }}"
    state: present
  loop: "{{ required_apache_modules }}"
  loop_control:
    loop_var: required_mod
  notify: restart apache2

- name: Ensure Apache2 is started and enabled
  service:
    name: apache2
    state: started
    enabled: true

- name: Get list of all domains used in Apache configs (ServerName and ServerAlias)
  shell: |
    grep -rhoE '^\s*(ServerName|ServerAlias)\s+\S+' /etc/apache2/sites-enabled \
    | awk '{print $2}' \
    | sort -u
  register: apache_domains
  changed_when: false

- name: Get list of Let's Encrypt renewal configs
  find:
    paths: /etc/letsencrypt/renewal
    patterns: "*.conf"
    file_type: file
  register: letsencrypt_renewals

- name: Remove stale Let's Encrypt certs and configs
  include_tasks: remove_cert.yml
  loop: "{{ letsencrypt_renewals.files }}"
  loop_control:
    loop_var: cert
